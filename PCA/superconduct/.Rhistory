qplot(xbi,ybi)
xb <- seq(0,1,.001)
yb <- dbeta(xb,2,5)
qplot(xb,yb)
x1=seq(0,5,by=0.01)
y1=dchisq(x1,2)
qplot(x1,y1)
x=seq(0,5,by=0.01)
y=dexp(x, 7)
qplot(x,y)
xbi <- seq(1,250,1)
ybi <- dbinom(xbi, 250, 0.05)
qplot(xbi,ybi)
xbi <- seq(1,250,1)
ybi <- dbinom(xbi, 250, 0.5)
qplot(xbi,ybi)
xbi <- seq(1,250,1)
ybi <- dbinom(xbi, 250, 0.7)
qplot(xbi,ybi)
ybi <- dbinom(xbi, 0.7)
xbi <- seq(1,250,1)
ybi <- dbinom(xbi,250,0.7)
qplot(xbi,ybi)
xbi <- seq(1,250,1)
ybi <- dbinom(xbi,250,0.07)
qplot(xbi,ybi)
#НОРМАЛЬНОЕ РАСПРЕДЕЛЕНИЕ
xn <- seq(-5,5,0.01)
yn <- dnorm(xn)
qplot(xn,yn)
#БИНОМИАЛЬНОЕ РАСПРЕДЕЛЕНИЕ
xbi <- seq(1,250,1)
ybi <- dbinom(xbi,250,0.07)
qplot(xbi,ybi)
#БЕТА-РАСПРЕДЕЛЕНИЕ
xb <- seq(0,1,.001)
yb <- dbeta(xb,2,5)
qplot(xb,yb)
#КСИ-КВАДРАТ
x1=seq(0,5,by=0.01)
y1=dchisq(x1,2)
qplot(x1,y1)
#ЭКСПОНЕНЦИАЛЬНОЕ РАСПРЕДЕЛЕНИЕ
x=seq(0,5,by=0.01)
y=dexp(x, 7)
qplot(x,y)
q()
q()
pnorm(q = 44, mean = 2, sd = 1.5)
pnorm(q = 44, mean = 2, sd = 1.5)
dnorm(q = 44, mean = 2, sd = 1.5)
pnorm(q = 44, mean = 2, sd = 1.5)
rnorm(44, 2, 1.5)
install.packages("DescTools")
library(DescTools)
q()
T_1 <- (280 - 250) / 15.7
pnorm(q = T_1)
q()
q()
q()
knitr::opts_chunk$set(echo = TRUE)
integrator <- function(path_to_file, ind){
setwd(path_to_file) #меняем директорию на указанную в аргументе
names_of_files <- dir(getwd()) #вектор со всеми файлами в директории
is_ind <- function(x, ind){
parts <- strsplit(x,".",fixed=TRUE)
nparts <- length(parts[[1]])
return(parts[[1]][nparts] == ind)
} #функция, определяющая наличие расширения ind
mk_table_csv <- function(x){
return(read.csv(x))
} #открывает файл с помощью read.csv
mk_table_table <- function(x){
return(read.table(x))
} #открывает файл с помощью read.table
table_maker <- function(named_vector, mk_table_f){
just_table <- mk_table_f(named_vector[1])
for (i in named_vector[-1]){
just_table <- rbind(just_table, mk_table_f(i))
}
return(just_table)
} #соединяет файлы из указанного вектора в один
if (ind == "csv"){
finish_table <- table_maker(names_of_files[sapply(names_of_files,is_ind, ind)], mk_table_csv)
} else{
finish_table <- table_maker(names_of_files[sapply(names_of_files,is_ind, ind)], mk_table_table)
}
return(finish_table)
}
olimpic <- integrator("C:/Users/pfft/OneDrive/Рабочий стол/БИ/R stat/Проект 1/Project", "csv")
str(olimpic)
olimpic$Sex <- factor(olimpic$Sex)
olimpic$NOC <- factor(olimpic$NOC)
olimpic$Sport <- factor(olimpic$Sport)
olimpic$Season <- factor(olimpic$Season)
olimpic$Medal <- factor(olimpic$Medal)
olimpic$Team <- factor(olimpic$Team)
str(olimpic)
knitr::opts_chunk$set(echo = TRUE)
integrator <- function(path_to_file, ind){
setwd(path_to_file) #change the directory to the one specified in the argument
names_of_files <- dir(getwd()) #vector with all files in directory
is_ind <- function(x, ind){
parts <- strsplit(x,".",fixed=TRUE)
nparts <- length(parts[[1]])
return(parts[[1]][nparts] == ind)
} #function that determines the presence of the extension ind
mk_table_csv <- function(x){
return(read.csv(x))
} #opens the file with read.csv
mk_table_table <- function(x){
return(read.table(x))
} #opens the file with read.table
table_maker <- function(named_vector, mk_table_f){
just_table <- mk_table_f(named_vector[1])
for (i in named_vector[-1]){
just_table <- rbind(just_table, mk_table_f(i))
}
return(just_table)
} #concatenates files from the specified vector into one
if (ind == "csv"){
finish_table <- table_maker(names_of_files[sapply(names_of_files,is_ind, ind)], mk_table_csv)
} else{
finish_table <- table_maker(names_of_files[sapply(names_of_files,is_ind, ind)], mk_table_table)
}
return(finish_table)
}
path <- readline(prompt="Enter path to file: ")
ind <- readline(prompt="Enter index, for example, 'csv': ")
olimpic <- integrator(path, ind)
str(olimpic)
#path <- readline(prompt="Enter path to file: ")
#ind <- readline(prompt="Enter index, for example, 'csv': ")
path <- "C:/Users/pfft/OneDrive/Рабочий стол/БИ/R stat/Проект 1/Project"
ind <- "csv"
olimpic <- integrator(path, ind)
olimpic_cor %>% mutate(Height_min_max_scaled = (olimpic_cor$Height - min(olimpic_cor$Height, na.rm = T))/(max(olimpic_cor$Height, na.rm = T)-min(olimpic_cor$Height, na.rm = T)))
q()
Soils
mtcars
lm(mpg~cyl, mtcars)
mod <- lm(mpg~cyl, mtcars)
mod <- lm(mpg~cyl, mtcars)
glht(mod, linfct = mcp(cyl = 'Tukey'))
install.packages("car")
Soils
library(car)
Soils
mod <- lm(mpg~cyl, mtcars)
glht(mod, linfct = mcp(cyl = 'Tukey'))
lm(pH~Depth, Soils)
a <- lm(pH~Depth, Soils)
anova(a)
library(multcompView)
glht(mod, linfct = mcp(cyl = 'Tukey'))
multcomp?
?multcomp
install.packages("multcomp")
library(multcomp)
glht(mod, linfct = mcp(cyl = 'Tukey'))
mod <- lm(mpg~cyl, mtcars)
glht(mod, linfct = mcp(cyl = 'Tukey'))
mod <- lm(mpg~cyl, mtcars)
glht(mod, linfct = mcp(cyl = 'Tukey'))
lm(mpg~cyl, mtcars)
mtcars
str(mtcars)
mt <- mtcars
mt$cyl <- factor(mt$cyl)
str(mt)
mod <- lm(mpg~cyl, mtcars)
glht(mod, linfct = mcp(cyl = 'Tukey'))
lm(mpg~cyl, mtcars)
mod <- lm(mpg~cyl, mt)
glht(mod, linfct = mcp(cyl = 'Tukey'))
g <- glht(mod, linfct = mcp(cyl = 'Tukey'))
summary(g)
a <- lm(pH~Depth, Soils)
anova(a)
a <- lm(pH~Depth, Soils)
Anova(a)
q()
install.packages("bootcluster")
library(bootcluster)
wine
library(bootcluster)
prcomp(wine, center = TRUE, scale = TRUE)
pca <- prcomp(wine, center = TRUE, scale = TRUE)
summary(pca)
0.3954+0.1784
library(vegan)
install.packages("vegan")
install.packages("vegan")
library(vegan)
library(bootcluster)
wine
pca1 <-rda(wine, scale = TRUE)
summary(pca1)
0.3954+0.1784
(0.3954+0.1784)*100
which.max(summary(pca1))
wine[-1]
pca1 <-rda(wine[-1], scale = TRUE)
summary(pca1)
pca1 <-rda(wine, scale = TRUE)
summary(pca1)
view(wine)
View(wine)
setwd("C:/Users/pfft/OneDrive/Рабочий стол/БИ/R stat/PCA.Project/superconduct")
train <- read.csv("train.csv")
unique_m <- read.csv("unique_m.csv")
superconduct <- cbind(train, unique_m)
superconduct$material <- NULL
str(superconduct)
summary(superconduct)
superconduct[,169] <- NULL
nrow(superconduct)
round(nrow(superconduct)*0.2)
number_of_study <- round(nrow(superconduct)*0.2)
sample(1:nrow(superconduct), number_of_study, replace = FALSE)
range(sample(1:nrow(superconduct), number_of_study, replace = FALSE))
sort(sample(1:nrow(superconduct), number_of_study, replace = FALSE))
number_of_study
random_vector <-sort(sample(1:nrow(superconduct), number_of_study, replace = FALSE))
library(dplyr)
study <- superconduct[random_vector, ]
test <- superconduct[-random_vector, ]
View(test)
View(study)
set.seed(88)
number_of_study <- round(nrow(superconduct)*0.2)
random_vector <-sort(sample(1:nrow(superconduct), number_of_study, replace = FALSE))
random_vector
study <- superconduct[random_vector, ]
test <- superconduct[-random_vector, ]
study_scaled <- study
study_scaled[, -82] <- scale(study_scaled[, -82])
test_scaled_study <- test
for (i in c(1:81, 83:length(study))){
test_scaled_study[,i] <- (test_scaled_study[,i] - mean(study[,i]))/sd(study[,i])
}
summary(study_scaled)
which(sapply(study_scaled, function(x) mean(x) == "NaN"))
study_scaled[sapply(study_scaled, function(x) mean(x) == "NaN")] <- NULL
test_scaled_study[sapply(test_scaled_study, function(x) mean(x) == "NaN")] <- NULL
fit_scaled <- lm(critical_temp~., study_scaled)
summary(fit_scaled)
summary(fit_scaled)$adj.r.squared
# Make psa
library(vegan)
study_fit_pca <- rda(study_scaled[-82])
summary(study_fit_pca)
summary(study_fit_pca)$Eigenvalues
eigenvals(study_fit_pca)
screeplot(study_fit_pca, type = "lines", bstick = TRUE)
str(summary(study_fit_pca))
summary(study_fit_pca)$ importance
summary(study_fit_pca)$importance
str(summary(study_fit_pca))
summary(study_fit_pca)$count
su <- summary(study_fit_pca)
su$call
su$species
su$sites
su$cont
pca <- prcomp(study_scaled[-82])
summary(pca)
plot(pca, type = "l", main = "Scree plot")
study_pca_date <- predict(pca, newdata = study_scaled[-82])# transformed matrix
study_pca_date <- as.data.frame(study_pca_date)# transf dataframe
study_pca_date_fixed <- study_pca_date %>% select(PC1:PC9)# choose 9 components
study_pca_date_fixed$critical_temp <- study$critical_temp# add feachure
# Make lm
new_pca_fit <- lm(critical_temp~., study_pca_date_fixed)
summary(new_pca_fit)
summary(new_pca_fit)$adj.r.squared
summary(fit_scaled)$adj.r.squared
new_pca_fit_inter <- lm(critical_temp~.*., study_pca_date_fixed)
summary(new_pca_fit_inter)$adj.r.squared
summary(fit_scaled)$adj.r.squared
predict(fit_scaled, test_scaled_study)
predicted_test <- predict(fit_scaled, test_scaled_study)
rm(predicted_test)
test_scaled_study$predicted_critical_temp <- predict(fit_scaled, test_scaled_study)
View(test_scaled_study)
test_scaled_study$predicted_critical_temp <- NULL
test_scaled_study$predicted_critical_temp <- predict(fit_scaled, test_scaled_study)
test_scaled_study[82]
names(test_scaled_study)[82]
names(test_scaled_study)[160]
names(test_scaled_study)[82]
shapiro.test(names(test_scaled_study)[82])
shapiro.test(test_scaled_study[82])
test_scaled_study[82]
is.numeric(test_scaled_study[82])
which(is.numeric(test_scaled_study[82]))
summary(test_scaled_study)
mean(test_scaled_study[82])
shapiro.test(test_scaled_study$critical_temp)
histogram(test_scaled_study$critical_temp)
histogram(test_scaled_study$predicted_critical_temp)
histogram(test_scaled_study$critical_temp)
histogram(test_scaled_study$predicted_critical_temp)
wilcox.test(test_scaled_study$predicted_critical_temp, test_scaled_study$critical_temp)
test_scaled_study$predicted_PCA_critical_temp <- predict(new_pca_fit, test_scaled_study)
predict(new_pca_fit, test_scaled_study)
test_pca_date <- predict(pca, newdata = test_scaled_study[-82])# transformed matrix
test_pca_date <- predict(pca, newdata = test_scaled_study[-82])# transformed matrix
test_pca_date <- as.data.frame(test_pca_date)# transf dataframe
test_pca_date_fixed <- test_pca_date %>% select(PC1:PC9)# choose 9 components
test_pca_date_fixed$critical_temp <- test$critical_temp# add feachure
View(test_pca_date_fixed)
test_scaled_study$predicted_critical_temp_PCA <- predict(new_pca_fit, test_scaled_study)
test_pca_date_fixed$predicted_critical_temp_PCA <- predict(new_pca_fit, test_pca_date_fixed)
View(test_pca_date_fixed)
wilcox.test(test_pca_date_fixed$predicted_critical_temp_PCA, test_pca_date_fixed$critical_temp)
test_pca_date_fixed$predicted_critical_temp_PCA_inter <- predict(new_pca_fit_inter, test_pca_date_fixed)
wilcox.test(test_pca_date_fixed$predicted_critical_temp_PCA, test_pca_date_fixed$critical_temp)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/pfft/OneDrive/Рабочий стол/БИ/R stat/PCA.Project/superconduct")
train <- read.csv("train.csv")
unique_m <- read.csv("unique_m.csv")
superconduct <- cbind(train, unique_m)
# Delet colum material
superconduct$material <- NULL
# Delete duplication
length(superconduct)
superconduct[,169] <- NULL
# Devide on trining
set.seed(88)
number_of_study <- round(nrow(superconduct)*0.2)
random_vector <-sort(sample(1:nrow(superconduct), number_of_study, replace = FALSE))
library(dplyr)
study <- superconduct[random_vector, ]
test <- superconduct[-random_vector, ]
# Scale
study_scaled <- study
study_scaled[, -82] <- scale(study_scaled[, -82])
test_scaled_study <- test
for (i in c(1:81, 83:length(study))){
test_scaled_study[,i] <- (test_scaled_study[,i] - mean(study[,i]))/sd(study[,i])
}
summary(study_scaled)
summ_1<- summary(study_scaled)
summ_1$Rn
summ_1<- summary(study_scaled)
str(summ_1)
summ_1<- summary(study_scaled)
summ_1[2]
summary(study_scaled)
summary(study_scaled)[2]
study_scaled[sapply(study_scaled, function(x) mean(x) == "NaN")] <- NULL
test_scaled_study[sapply(test_scaled_study, function(x) mean(x) == "NaN")] <- NULL
#lm
fit_scaled <- lm(critical_temp~., study_scaled)
summary(fit_scaled)
#lm
fit_scaled <- lm(critical_temp~., study_scaled)
cat("Adjusted R-squared:")
summary(fit_scaled)$adj.r.squared
# Make psa
library(vegan)
study_fit_pca <- rda(study_scaled[-82])
su <- summary(study_fit_pca)
screeplot(study_fit_pca, type = "lines", bstick = TRUE)
# On this graph we can see, that 8 components we can consider
su$cont
# We need ~ 30 components to explain 70% of dispersion
# Make pca on scaled study_dataframe
pca <- prcomp(study_scaled[-82])
summary(pca)
plot(pca, type = "l", main = "Scree plot")
# make new study_dataframe
study_pca_date <- predict(pca, newdata = study_scaled[-82])# transformed matrix
study_pca_date <- as.data.frame(study_pca_date)# transf dataframe
study_pca_date_fixed <- study_pca_date %>% select(PC1:PC9)# choose 9 components
study_pca_date_fixed$critical_temp <- study$critical_temp# add feachure
# Make lm
new_pca_fit <- lm(critical_temp~., study_pca_date_fixed)
summary(new_pca_fit)$adj.r.squared
summary(fit_scaled)$adj.r.squared
# Make standart pca on scaled study_dataframe
pca <- prcomp(study_scaled[-82])
# make new study_dataframe
study_pca_date <- predict(pca, newdata = study_scaled[-82])# transformed matrix
study_pca_date <- as.data.frame(study_pca_date)# transf dataframe
study_pca_date_fixed <- study_pca_date %>% select(PC1:PC9)# choose 9 components
study_pca_date_fixed$critical_temp <- study$critical_temp# add feachure
# Make lm
new_pca_fit <- lm(critical_temp~., study_pca_date_fixed)
cat("New Adjusted R-squared", summary(new_pca_fit)$adj.r.squared)
cat("Old Adjusted R-squared", summary(fit_scaled)$adj.r.squared)
# Make standart pca on scaled study_dataframe
pca <- prcomp(study_scaled[-82])
# make new study_dataframe
study_pca_date <- predict(pca, newdata = study_scaled[-82])# transformed matrix
study_pca_date <- as.data.frame(study_pca_date)# transf dataframe
study_pca_date_fixed <- study_pca_date %>% select(PC1:PC9)# choose 9 components
study_pca_date_fixed$critical_temp <- study$critical_temp# add feachure
# Make lm
new_pca_fit <- lm(critical_temp~., study_pca_date_fixed)
cat("New Adjusted R-squared", summary(new_pca_fit)$adj.r.squared)
cat(" ")
cat("Old Adjusted R-squared", summary(fit_scaled)$adj.r.squared)
study_pca_date_fixed_30 <- study_pca_date %>% select(PC1:PC30)
study_pca_date_fixed_30$critical_temp <- study$critical_temp
new_pca_fit_30 <- lm(critical_temp~., study_pca_date_fixed_30)
cat("New 30-fold Adjusted R-squared", summary(new_pca_fit_30)$adj.r.squared)
cat(" ")
cat("Old Adjusted R-squared", summary(fit_scaled)$adj.r.squared)
# Make standart pca on scaled study_dataframe
pca <- prcomp(study_scaled[-82])
# make new study_dataframe
study_pca_date <- predict(pca, newdata = study_scaled[-82])# transformed matrix
study_pca_date <- as.data.frame(study_pca_date)# transf dataframe
study_pca_date_fixed <- study_pca_date %>% select(PC1:PC9)# choose 9 components
study_pca_date_fixed$critical_temp <- study$critical_temp# add feachure
# Make lm
new_pca_fit <- lm(critical_temp~., study_pca_date_fixed)
cat("New Adjusted R-squared", summary(new_pca_fit)$adj.r.squared)
cat(" ")
cat("Old Adjusted R-squared", summary(fit_scaled)$adj.r.squared)
new_pca_fit_30_inter <- lm(critical_temp~.*., study_pca_date_fixed_30)
cat("New 30-fold Adjusted R-squared", summary(new_pca_fit_30_inter)$adj.r.squared)
cat(" ")
cat("Old Adjusted R-squared", summary(fit_scaled)$adj.r.squared)
install.packages("caret")
library(caret)
test_scaled_study$predicted_critical_temp <- predict(fit_scaled, test_scaled_study)
test_pca_date <- predict(pca, newdata = test_scaled_study[-82])# transformed matrix
test_pca_date <- as.data.frame(test_pca_date)# transf dataframe
test_pca_date_fixed <- test_pca_date %>% select(PC1:PC30)# choose 30 components
test_pca_date_fixed$critical_temp <- test$critical_temp# add feachure
test_pca_date <- predict(pca, newdata = test_scaled_study[-82])# transformed matrix
test_pca_date <- as.data.frame(test_pca_date)# transf dataframe
test_pca_date_fixed <- test_pca_date %>% select(PC1:PC30)# choose 30 components
test_pca_date_fixed$critical_temp <- test$critical_temp# add feachure
test_pca_date_fixed$predicted_critical_temp_PCA <- predict(new_pca_fit_30_inter, test_pca_date_fixed)
cat("The first model")
cat(" ")
pred <- test_scaled_study$predicted_critical_temp
fact <- test_scaled$critical_temp
test_pca_date <- predict(pca, newdata = test_scaled_study[-82])# transformed matrix
test_pca_date <- as.data.frame(test_pca_date)# transf dataframe
test_pca_date_fixed <- test_pca_date %>% select(PC1:PC30)# choose 30 components
test_pca_date_fixed$critical_temp <- test$critical_temp# add feachure
test_pca_date_fixed$predicted_critical_temp_PCA <- predict(new_pca_fit_30_inter, test_pca_date_fixed)
test_scaled_study$predicted_critical_temp <- predict(fit_scaled, test_scaled_study)
cat("The first model")
cat(" ")
pred <- test_scaled_study$predicted_critical_temp
fact <- test_scaled_study$critical_temp
mae <- mean(abs(pred - fact))
rmse <- sqrt(mean((pred - fact)^2))
Rsq <- 1 - sum((fact - pred)^2)/sum((mean(fact) - fact)^2)
cat(c(MAE = mae, RSME = rmse,  Rsq = Rsq ))
cat("The pca_interact model")
cat(" ")
pred <- test_pca_date_fixed$predicted_critical_temp_PCA
fact <- test_pca_date_fixed$critical_temp
mae2 <- mean(abs(pred - fact))
rmse2 <- sqrt(mean((pred - fact)^2))
Rsq2 <- 1 - sum((fact - pred)^2)/sum((mean(fact) - fact)^2)
cat(c(MAE = mae2, RSME = rmse2,  Rsq = Rsq2 ))
cat("The first model")
cat(" ")
pred <- test_scaled_study$predicted_critical_temp
fact <- test_scaled_study$critical_temp
mae <- mean(abs(pred - fact))
rmse <- sqrt(mean((pred - fact)^2))
Rsq <- 1 - sum((fact - pred)^2)/sum((mean(fact) - fact)^2)
cat(c(MAE = mae, RSME = rmse,  Rsq = Rsq ))
cat(" ")
cat("The pca_interact model")
cat(" ")
pred <- test_pca_date_fixed$predicted_critical_temp_PCA
fact <- test_pca_date_fixed$critical_temp
mae2 <- mean(abs(pred - fact))
rmse2 <- sqrt(mean((pred - fact)^2))
Rsq2 <- 1 - sum((fact - pred)^2)/sum((mean(fact) - fact)^2)
cat(c(MAE = mae2, RSME = rmse2,  Rsq = Rsq2 ))
cat("The first model")
cat(" ")
pred <- test_scaled_study$predicted_critical_temp
fact <- test_scaled_study$critical_temp
mae <- mean(abs(pred - fact))
rmse <- sqrt(mean((pred - fact)^2))
Rsq <- 1 - sum((fact - pred)^2)/sum((mean(fact) - fact)^2)
cat("The mean absolute deviation: ", mae, "The root of the standard deviation:", rmse,  "The square of the determination coefficient: ", Rsq )
cat(" ")
cat("The pca_interact model")
cat(" ")
pred <- test_pca_date_fixed$predicted_critical_temp_PCA
fact <- test_pca_date_fixed$critical_temp
mae2 <- mean(abs(pred - fact))
rmse2 <- sqrt(mean((pred - fact)^2))
Rsq2 <- 1 - sum((fact - pred)^2)/sum((mean(fact) - fact)^2)
cat("The mean absolute deviation: ", mae2, "The root of the standard deviation:", rmse2,  "The square of the determination coefficient: ", Rsq2 )
pred <- test_scaled_study$predicted_critical_temp
fact <- test_scaled_study$critical_temp
mae <- mean(abs(pred - fact))
rmse <- sqrt(mean((pred - fact)^2))
Rsq <- 1 - sum((fact - pred)^2)/sum((mean(fact) - fact)^2)
cat("The mean absolute deviation: ", mae, "The root of the standard deviation:", rmse,  "The square of the determination coefficient: ", Rsq )
pred <- test_pca_date_fixed$predicted_critical_temp_PCA
fact <- test_pca_date_fixed$critical_temp
mae2 <- mean(abs(pred - fact))
rmse2 <- sqrt(mean((pred - fact)^2))
Rsq2 <- 1 - sum((fact - pred)^2)/sum((mean(fact) - fact)^2)
cat("The mean absolute deviation: ", mae2, "The root of the standard deviation:", rmse2,  "The square of the determination coefficient: ", Rsq2 )
q()
